import asyncio
from solana.rpc.async_api import AsyncClient
from solders.pubkey import Pubkey

from utils import login_with_secret_key, print_header
from solana_actions import transfer_assets, get_transaction_history, live_monitor

async def main_menu():
    """H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn menu v√† lu·ªìng ·ª©ng d·ª•ng."""
    # B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p
    user_keypair = login_with_secret_key()
    if not user_keypair:
        return # K·∫øt th√∫c n·∫øu ƒëƒÉng nh·∫≠p th·∫•t b·∫°i

    # K·∫øt n·ªëi t·ªõi Solana Devnet
    client = AsyncClient("https://api.devnet.solana.com")
    is_connected = await client.is_connected()
    print(f"K·∫øt n·ªëi t·ªõi Devnet: {'Th√†nh c√¥ng' if is_connected else 'Th·∫•t b·∫°i'}")
    if not is_connected:
        await client.close()
        return

    while True:
        print_header("Menu ch√≠nh")
        print("1. Chuy·ªÉn SOL / SPL Token")
        print("2. Xem l·ªãch s·ª≠ giao d·ªãch")
        print("3. Gi√°m s√°t giao d·ªãch tr·ª±c ti·∫øp")
        print("4. Tho√°t")
        choice = input("Vui l√≤ng ch·ªçn m·ªôt ch·ª©c nƒÉng: ").strip()

        if choice == '1':
            print_header("Ch·ª©c nƒÉng 1: Chuy·ªÉn ti·ªÅn")
            receiver_str = input("Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ ng∆∞·ªùi nh·∫≠n (public key): ").strip()
            mint_str = input("Nh·∫≠p ƒë·ªãa ch·ªâ mint token (ho·∫∑c 'SOL' cho native SOL): ").strip()
            amount_str = input("Nh·∫≠p s·ªë l∆∞·ª£ng ƒë·ªÉ g·ª≠i (v√≠ d·ª•: 1.5): ").strip()
            try:
                amount = float(amount_str)
                await transfer_assets(client, user_keypair, receiver_str, mint_str, amount)
            except ValueError:
                print("[L·ªói] S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá.")
            except Exception as e:
                print(f"[L·ªói] ƒê√£ x·∫£y ra l·ªói khi chuy·ªÉn ti·ªÅn: {e}")

        elif choice == '2':
            print_header("Ch·ª©c nƒÉng 2: L·ªãch s·ª≠ giao d·ªãch")
            try:
                # --- L·∫•y danh s√°ch t√†i kho·∫£n ƒë·ªÉ ng∆∞·ªùi d√πng l·ª±a ch·ªçn ---
                print("üîÑ ƒêang t√¨m c√°c t√†i kho·∫£n c·ªßa b·∫°n ƒë·ªÉ l·ª±a ch·ªçn...")
                from spl.token.constants import TOKEN_PROGRAM_ID
                from solana.rpc.types import TokenAccountOpts
                from spl.token._layouts import ACCOUNT_LAYOUT # Th√™m import ƒë·ªÉ parse d·ªØ li·ªáu

                main_wallet_pubkey = user_keypair.pubkey()
                
                # D√πng list of tuples ƒë·ªÉ l∆∞u (t√™n hi·ªÉn th·ªã, pubkey)
                selectable_accounts = [ (f"V√≠ ch√≠nh (SOL): {main_wallet_pubkey}", main_wallet_pubkey) ]
                
                # L·∫•y d·ªØ li·ªáu th√¥ ƒë·ªÉ tr√°nh l·ªói parse JSON c·ªßa th∆∞ vi·ªán
                token_accounts_resp = await client.get_token_accounts_by_owner(
                    main_wallet_pubkey, TokenAccountOpts(program_id=TOKEN_PROGRAM_ID)
                )
                
                if token_accounts_resp.value:
                    for acc_info in token_accounts_resp.value:
                        pubkey_to_check = acc_info.pubkey
                        try:
                            # Parse d·ªØ li·ªáu th√¥ ƒë·ªÉ l·∫•y mint address
                            account_data = ACCOUNT_LAYOUT.parse(acc_info.account.data)
                            # Chuy·ªÉn ƒë·ªïi bytes th√†nh ƒë·ªãa ch·ªâ Pubkey d·∫°ng chu·ªói Base58
                            mint_address = str(Pubkey(account_data.mint))
                            
                            # L·∫•y s·ªë d∆∞ ri√™ng bi·ªát ƒë·ªÉ tƒÉng ƒë·ªô ·ªïn ƒë·ªãnh
                            balance_resp = await client.get_token_account_balance(pubkey_to_check)
                            balance = balance_resp.value.ui_amount_string
                            
                            display_name = f"Token: {mint_address} (S·ªë d∆∞: {balance})"
                            selectable_accounts.append( (display_name, pubkey_to_check) )
                        except Exception:
                            # N·∫øu c√≥ l·ªói (v√≠ d·ª• t√†i kho·∫£n ƒë√£ ƒë√≥ng), hi·ªán th√¥ng tin c∆° b·∫£n
                            display_name = f"T√†i kho·∫£n Token: {pubkey_to_check}"
                            selectable_accounts.append( (display_name, pubkey_to_check) )

                print("\nCh·ªçn t√†i kho·∫£n ƒë·ªÉ xem l·ªãch s·ª≠:")
                for i, (display_name, _) in enumerate(selectable_accounts):
                    print(f"  {i+1}. {display_name}")

                acc_choice_str = input(f"Nh·∫≠p l·ª±a ch·ªçn (1-{len(selectable_accounts)}): ").strip()
                acc_choice = int(acc_choice_str) - 1

                if not 0 <= acc_choice < len(selectable_accounts):
                    print("[L·ªói] L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
                    continue

                # L·∫•y pubkey c·ªßa t√†i kho·∫£n ƒë√£ ch·ªçn ƒë·ªÉ query
                selected_pubkey_to_query = selectable_accounts[acc_choice][1]
                # --- K·∫øt th√∫c ph·∫ßn l·ª±a ch·ªçn t√†i kho·∫£n ---

                limit_str = input("Nh·∫≠p s·ªë l∆∞·ª£ng giao d·ªãch g·∫ßn nh·∫•t mu·ªën xem (v√≠ d·ª•: 5): ").strip()
                limit = int(limit_str)
                if limit <= 0:
                    print("[L·ªói] Vui l√≤ng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng.")
                else:
                    await get_transaction_history(client, selected_pubkey_to_query, limit)
            except ValueError:
                print("[L·ªói] L·ª±a ch·ªçn ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.")
            except Exception as e:
                print(f"[L·ªói] ƒê√£ x·∫£y ra l·ªói khi xem l·ªãch s·ª≠: {e}")

        elif choice == '3':
            print_header("Ch·ª©c nƒÉng 3: Gi√°m s√°t tr·ª±c ti·∫øp")
            try:
                await live_monitor(client, user_keypair.pubkey())
            except KeyboardInterrupt:
                print("\nƒê√£ d·ª´ng gi√°m s√°t.")
            except Exception as e:
                print(f"[L·ªói] ƒê√£ x·∫£y ra l·ªói khi gi√°m s√°t: {e}")

        elif choice == '4':
            break # Tho√°t kh·ªèi v√≤ng l·∫∑p
        
        else:
            print("[L·ªói] L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.")

    await client.close()
    print("\nƒê√£ ng·∫Øt k·∫øt n·ªëi!")

if __name__ == "__main__":
    try:
        asyncio.run(main_menu())
    except KeyboardInterrupt:
        print("\nƒê√£ ƒë√≥ng ch∆∞∆°ng tr√¨nh.") 